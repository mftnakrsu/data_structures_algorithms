# -*- coding: utf-8 -*-
"""stack_queue_deque.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aD22FafjpzKO3-WvF6lKGQi_CqSJxEQz

# STACK

Last in First out, uçak veya otobüs
"""

class Stack:
  def __init__(self):
    """
    initialize
    """
    self.items=[]

  def isEmpty(self):
    """
    this method check if empty or not
    """
    return self.items==[]

  def push(self,item):
    """
    append an item for stack
    """
    self.items.append(item)

  def pop(self):
    """
    pop item from stack
    """
    return self.items.pop()
  def top(self):
    """
    show the last item in stack
    """
    return self.items[len(self.items)-1]

  def size(self):
    """
    size of stack
    """
    return len(self.items)

stack=Stack()
stack.isEmpty()

stack.push("Ankara")
print(stack.top())

stack.push("İzmir")
print(stack.top())

stack.push("Bartın")
print(stack.top())

stack.pop()
print(stack.top())

"""# Queues

First in First out, boru veya yemekhane sırası
"""

class Queue:

  def __init__(self):
    """
    initiliaze
    """
    self.items=[]

  def isEmpty(self):
    """
    this method check if empty or not
    """
    return self.items == [] #bool operations

  def enqueue(self,item):
    """
    add item queue
    """
    self.items.insert(0,item)
  
  def dequeue(self):
    """
    remove item from queue
    """
 
    return self.items.pop()
  
  def size(self):
    """
    length of queue
    """
    return len(self.items)

queue=Queue()

print(queue.isEmpty())

queue.enqueue("ankara")
queue.enqueue("bartın")
queue.enqueue("izmir")
print(queue.size())

"""# Deque"""

class Deque:

  def __init__(self):
    self.items=[]

  def isEmpty(self):
    return self.items==[]

  def addFront(self,item):
    """
    add item front side 
    """
    self.items.append(item)

  def addRear(self,item):
    """
    add item read side
    """
    self.items.insert(0,item)
  
  def removeFront(self):
    """
    remove item from front side
    """
    return self.items.pop()

  def removeRear(self):
    return self.items.pop(0)

  def size(self):
    """
    lenght of deque
    """
    return len(self.items)

deque = Deque()

print(deque.isEmpty())

deque.addFront("deep")
deque.addRear("learning")


print("size:",deque.size())